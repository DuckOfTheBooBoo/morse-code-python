from src.morse_code import text_to_morse

"""
TODO: 
- Test that the first function can correctly convert a simple text string to a Morse code string.
- Test that the first function can correctly handle strings containing uppercase letters.
- Test that the first function can correctly handle special characters, such as punctuation marks.
- Test that the first function can handle empty strings and return an empty string.
- Test that the first function can handle strings containing non-alphabetic characters (such as numbers or symbols) and return an error message or raise an exception.
- Test that the first function can handle input strings that are very long and return a Morse code string that is also very long.
- Test that the first function can handle strings containing multiple lines or paragraphs and return a Morse code string with proper spacing.
"""

def test_simple_text():

    input_str = "hello world"
    expected_output = ".... . .-.. .-.. --- / .-- --- .-. .-.. -.."
    
    assert text_to_morse(input_str) == expected_output, f"Error: Expected {expected_output}, but got {text_to_morse(input_str)}"


def test_uppercase_leter():

    input_str = "WOULD YOU RUN"
    expected_output = ".-- --- ..- .-.. -.. / -.-- --- ..- / .-. ..- -."

    assert text_to_morse(input_str) == expected_output, f"Error: Expected {expected_output}, but got {text_to_morse(input_str)}"

def test_punctuation_marks():

    input_str = "Hello, world! How are you?"
    expected_output = ".... . .-.. .-.. --- --..-- / .-- --- .-. .-.. -.. -.-.-- / .... --- .-- / .- .-. . / -.-- --- ..- ..--.."

    assert text_to_morse(input_str) == expected_output, f"Error: Expected {expected_output}, but got {text_to_morse(input_str)}"

def test_empty_string():

    input_str = ""
    expected_output = ""

    assert text_to_morse(input_str) == expected_output, f"Error: Expected {expected_output}, but got {text_to_morse(input_str)}"

def test_non_alphabetic():
    pass

def test_long_string():

    input_str = "It's important to note that each test function should ideally test a single behavior or feature. This allows you to isolate failures and pinpoint issues more easily. However, it's perfectly acceptable to have multiple assertions within a single test function as long as they're all testing the same behavior or feature."

    expected_output = ".. - .----. ... / .. -- .--. --- .-. - .- -. - / - --- / -. --- - . / - .... .- - / . .- -.-. .... / - . ... - / ..-. ..- -. -.-. - .. --- -. / ... .... --- ..- .-.. -.. / .. -.. . .- .-.. .-.. -.-- / - . ... - / .- / ... .. -. --. .-.. . / -... . .... .- ...- .. --- .-. / --- .-. / ..-. . .- - ..- .-. . .-.-.- / - .... .. ... / .- .-.. .-.. --- .-- ... / -.-- --- ..- / - --- / .. ... --- .-.. .- - . / ..-. .- .. .-.. ..- .-. . ... / .- -. -.. / .--. .. -. .--. --- .. -. - / .. ... ... ..- . ... / -- --- .-. . / . .- ... .. .-.. -.-- .-.-.- / .... --- .-- . ...- . .-. --..-- / .. - .----. ... / .--. . .-. ..-. . -.-. - .-.. -.-- / .- -.-. -.-. . .--. - .- -... .-.. . / - --- / .... .- ...- . / -- ..- .-.. - .. .--. .-.. . / .- ... ... . .-. - .. --- -. ... / .-- .. - .... .. -. / .- / ... .. -. --. .-.. . / - . ... - / ..-. ..- -. -.-. - .. --- -. / .- ... / .-.. --- -. --. / .- ... / - .... . -.-- .----. .-. . / .- .-.. .-.. / - . ... - .. -. --. / - .... . / ... .- -- . / -... . .... .- ...- .. --- .-. / --- .-. / ..-. . .- - ..- .-. . .-.-.-"

    assert text_to_morse(input_str) == expected_output, f"Error: Expected {expected_output}, but got {text_to_morse(input_str)}"

def test_multiple_line_string():
    
    input_str = """Python is a popular programming language that is widely used for various purposes such as web development, data analysis, artificial intelligence, and more. It is known for its simplicity, readability, and easy-to-learn syntax, making it a popular choice among beginners and experienced developers alike. Python's extensive library provides developers with a wealth of tools and resources to create powerful applications efficiently. With its dynamically-typed nature, Python allows for quick prototyping and testing of code, which makes it an ideal language for iterative development. Furthermore, Python's flexibility and portability enable developers to build applications that can run on multiple platforms, making it a popular choice for cross-platform development. Overall, Python's versatility and ease of use make it an excellent language for developers looking to build robust and innovative applications.
    
    While Python is a widely used programming language with many advantages, it also has some drawbacks that developers should be aware of. One of the main cons of Python is its performance compared to lower-level languages like C or C++. Since Python is an interpreted language, it can be slower than compiled languages, particularly when working with large datasets or performing complex computations. Additionally, Python's dynamically-typed nature can lead to unexpected errors and bugs that can be difficult to debug. Another potential issue with Python is version compatibility, as different versions of Python may have different syntax and library support, making it challenging to maintain code across different environments. Finally, while Python has an extensive library of modules and tools, it may not be the best choice for certain applications that require specific niche technologies or require maximum performance. Despite these cons, Python remains a popular choice among developers due to its simplicity, versatility, and broad range of applications."""

    expected_output = ".--. -.-- - .... --- -. / .. ... / .- / .--. --- .--. ..- .-.. .- .-. / .--. .-. --- --. .-. .- -- -- .. -. --. / .-.. .- -. --. ..- .- --. . / - .... .- - / .. ... / .-- .. -.. . .-.. -.-- / ..- ... . -.. / ..-. --- .-. / ...- .- .-. .. --- ..- ... / .--. ..- .-. .--. --- ... . ... / ... ..- -.-. .... / .- ... / .-- . -... / -.. . ...- . .-.. --- .--. -- . -. - --..-- / -.. .- - .- / .- -. .- .-.. -.-- ... .. ... --..-- / .- .-. - .. ..-. .. -.-. .. .- .-.. / .. -. - . .-.. .-.. .. --. . -. -.-. . --..-- / .- -. -.. / -- --- .-. . .-.-.- / .. - / .. ... / -.- -. --- .-- -. / ..-. --- .-. / .. - ... / ... .. -- .--. .-.. .. -.-. .. - -.-- --..-- / .-. . .- -.. .- -... .. .-.. .. - -.-- --..-- / .- -. -.. / . .- ... -.-- -....- - --- -....- .-.. . .- .-. -. / ... -.-- -. - .- -..- --..-- / -- .- -.- .. -. --. / .. - / .- / .--. --- .--. ..- .-.. .- .-. / -.-. .... --- .. -.-. . / .- -- --- -. --. / -... . --. .. -. -. . .-. ... / .- -. -.. / . -..- .--. . .-. .. . -. -.-. . -.. / -.. . ...- . .-.. --- .--. . .-. ... / .- .-.. .. -.- . .-.-.- / .--. -.-- - .... --- -. .----. ... / . -..- - . -. ... .. ...- . / .-.. .. -... .-. .- .-. -.-- / .--. .-. --- ...- .. -.. . ... / -.. . ...- . .-.. --- .--. . .-. ... / .-- .. - .... / .- / .-- . .- .-.. - .... / --- ..-. / - --- --- .-.. ... / .- -. -.. / .-. . ... --- ..- .-. -.-. . ... / - --- / -.-. .-. . .- - . / .--. --- .-- . .-. ..-. ..- .-.. / .- .--. .--. .-.. .. -.-. .- - .. --- -. ... / . ..-. ..-. .. -.-. .. . -. - .-.. -.-- .-.-.- / .-- .. - .... / .. - ... / -.. -.-- -. .- -- .. -.-. .- .-.. .-.. -.-- -....- - -.-- .--. . -.. / -. .- - ..- .-. . --..-- / .--. -.-- - .... --- -. / .- .-.. .-.. --- .-- ... / ..-. --- .-. / --.- ..- .. -.-. -.- / .--. .-. --- - --- - -.-- .--. .. -. --. / .- -. -.. / - . ... - .. -. --. / --- ..-. / -.-. --- -.. . --..-- / .-- .... .. -.-. .... / -- .- -.- . ... / .. - / .- -. / .. -.. . .- .-.. / .-.. .- -. --. ..- .- --. . / ..-. --- .-. / .. - . .-. .- - .. ...- . / -.. . ...- . .-.. --- .--. -- . -. - .-.-.- / ..-. ..- .-. - .... . .-. -- --- .-. . --..-- / .--. -.-- - .... --- -. .----. ... / ..-. .-.. . -..- .. -... .. .-.. .. - -.-- / .- -. -.. / .--. --- .-. - .- -... .. .-.. .. - -.-- / . -. .- -... .-.. . / -.. . ...- . .-.. --- .--. . .-. ... / - --- / -... ..- .. .-.. -.. / .- .--. .--. .-.. .. -.-. .- - .. --- -. ... / - .... .- - / -.-. .- -. / .-. ..- -. / --- -. / -- ..- .-.. - .. .--. .-.. . / .--. .-.. .- - ..-. --- .-. -- ... --..-- / -- .- -.- .. -. --. / .. - / .- / .--. --- .--. ..- .-.. .- .-. / -.-. .... --- .. -.-. . / ..-. --- .-. / -.-. .-. --- ... ... -....- .--. .-.. .- - ..-. --- .-. -- / -.. . ...- . .-.. --- .--. -- . -. - .-.-.- / --- ...- . .-. .- .-.. .-.. --..-- / .--. -.-- - .... --- -. .----. ... / ...- . .-. ... .- - .. .-.. .. - -.-- / .- -. -.. / . .- ... . / --- ..-. / ..- ... . / -- .- -.- . / .. - / .- -. / . -..- -.-. . .-.. .-.. . -. - / .-.. .- -. --. ..- .- --. . / ..-. --- .-. / -.. . ...- . .-.. --- .--. . .-. ... / .-.. --- --- -.- .. -. --. / - --- / -... ..- .. .-.. -.. / .-. --- -... ..- ... - / .- -. -.. / .. -. -. --- ...- .- - .. ...- . / .- .--. .--. .-.. .. -.-. .- - .. --- -. ... .-.-.- / .-- .... .. .-.. . / .--. -.-- - .... --- -. / .. ... / .- / .-- .. -.. . .-.. -.-- / ..- ... . -.. / .--. .-. --- --. .-. .- -- -- .. -. --. / .-.. .- -. --. ..- .- --. . / .-- .. - .... / -- .- -. -.-- / .- -.. ...- .- -. - .- --. . ... --..-- / .. - / .- .-.. ... --- / .... .- ... / ... --- -- . / -.. .-. .- .-- -... .- -.-. -.- ... / - .... .- - / -.. . ...- . .-.. --- .--. . .-. ... / ... .... --- ..- .-.. -.. / -... . / .- .-- .- .-. . / --- ..-. .-.-.- / --- -. . / --- ..-. / - .... . / -- .- .. -. / -.-. --- -. ... / --- ..-. / .--. -.-- - .... --- -. / .. ... / .. - ... / .--. . .-. ..-. --- .-. -- .- -. -.-. . / -.-. --- -- .--. .- .-. . -.. / - --- / .-.. --- .-- . .-. -....- .-.. . ...- . .-.. / .-.. .- -. --. ..- .- --. . ... / .-.. .. -.- . / -.-. / --- .-. / -.-. .-.-. .-.-. .-.-.- / ... .. -. -.-. . / .--. -.-- - .... --- -. / .. ... / .- -. / .. -. - . .-. .--. .-. . - . -.. / .-.. .- -. --. ..- .- --. . --..-- / .. - / -.-. .- -. / -... . / ... .-.. --- .-- . .-. / - .... .- -. / -.-. --- -- .--. .. .-.. . -.. / .-.. .- -. --. ..- .- --. . ... --..-- / .--. .- .-. - .. -.-. ..- .-.. .- .-. .-.. -.-- / .-- .... . -. / .-- --- .-. -.- .. -. --. / .-- .. - .... / .-.. .- .-. --. . / -.. .- - .- ... . - ... / --- .-. / .--. . .-. ..-. --- .-. -- .. -. --. / -.-. --- -- .--. .-.. . -..- / -.-. --- -- .--. ..- - .- - .. --- -. ... .-.-.- / .- -.. -.. .. - .. --- -. .- .-.. .-.. -.-- --..-- / .--. -.-- - .... --- -. .----. ... / -.. -.-- -. .- -- .. -.-. .- .-.. .-.. -.-- -....- - -.-- .--. . -.. / -. .- - ..- .-. . / -.-. .- -. / .-.. . .- -.. / - --- / ..- -. . -..- .--. . -.-. - . -.. / . .-. .-. --- .-. ... / .- -. -.. / -... ..- --. ... / - .... .- - / -.-. .- -. / -... . / -.. .. ..-. ..-. .. -.-. ..- .-.. - / - --- / -.. . -... ..- --. .-.-.- / .- -. --- - .... . .-. / .--. --- - . -. - .. .- .-.. / .. ... ... ..- . / .-- .. - .... / .--. -.-- - .... --- -. / .. ... / ...- . .-. ... .. --- -. / -.-. --- -- .--. .- - .. -... .. .-.. .. - -.-- --..-- / .- ... / -.. .. ..-. ..-. . .-. . -. - / ...- . .-. ... .. --- -. ... / --- ..-. / .--. -.-- - .... --- -. / -- .- -.-- / .... .- ...- . / -.. .. ..-. ..-. . .-. . -. - / ... -.-- -. - .- -..- / .- -. -.. / .-.. .. -... .-. .- .-. -.-- / ... ..- .--. .--. --- .-. - --..-- / -- .- -.- .. -. --. / .. - / -.-. .... .- .-.. .-.. . -. --. .. -. --. / - --- / -- .- .. -. - .- .. -. / -.-. --- -.. . / .- -.-. .-. --- ... ... / -.. .. ..-. ..-. . .-. . -. - / . -. ...- .. .-. --- -. -- . -. - ... .-.-.- / ..-. .. -. .- .-.. .-.. -.-- --..-- / .-- .... .. .-.. . / .--. -.-- - .... --- -. / .... .- ... / .- -. / . -..- - . -. ... .. ...- . / .-.. .. -... .-. .- .-. -.-- / --- ..-. / -- --- -.. ..- .-.. . ... / .- -. -.. / - --- --- .-.. ... --..-- / .. - / -- .- -.-- / -. --- - / -... . / - .... . / -... . ... - / -.-. .... --- .. -.-. . / ..-. --- .-. / -.-. . .-. - .- .. -. / .- .--. .--. .-.. .. -.-. .- - .. --- -. ... / - .... .- - / .-. . --.- ..- .. .-. . / ... .--. . -.-. .. ..-. .. -.-. / -. .. -.-. .... . / - . -.-. .... -. --- .-.. --- --. .. . ... / --- .-. / .-. . --.- ..- .. .-. . / -- .- -..- .. -- ..- -- / .--. . .-. ..-. --- .-. -- .- -. -.-. . .-.-.- / -.. . ... .--. .. - . / - .... . ... . / -.-. --- -. ... --..-- / .--. -.-- - .... --- -. / .-. . -- .- .. -. ... / .- / .--. --- .--. ..- .-.. .- .-. / -.-. .... --- .. -.-. . / .- -- --- -. --. / -.. . ...- . .-.. --- .--. . .-. ... / -.. ..- . / - --- / .. - ... / ... .. -- .--. .-.. .. -.-. .. - -.-- --..-- / ...- . .-. ... .- - .. .-.. .. - -.-- --..-- / .- -. -.. / -... .-. --- .- -.. / .-. .- -. --. . / --- ..-. / .- .--. .--. .-.. .. -.-. .- - .. --- -. ... .-.-.-"

    assert text_to_morse(input_str) == expected_output, f"Error: Expected {expected_output}, but got {text_to_morse(input_str)}"
